<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        KXgoKCgMLCwsAConKIBPe2r/dM6r/3TOq/9Pe2r/KiYojichIxUrKioHKicoACwqKgcuLy98ND053DAz
        MvFQfGv/dM6r/3TOq/9Pe2r/KicofSQkJCNGRkbcwcHB//Dw8P/u7u7/7u7u/+7u7v/u7u7/7u7u/+/v
        7//FxcX/X19f9i0tLY4nJycKKicof097av90zqv/dM6r/1B8a/8wMzLxND053C4vL3wrKSoHKSQmHDQ9
        Odljpoz/S3Fj/095af90zqv/dM6r/1B7av8rJye9KiYlpEZEQ/qGhIP/i4iI/4uIiP+LiIj/i4iI/4uI
        iP+Kh4f/m5qZ/9zb3P/R0dH/YGBg9iknJp8rJye9UHtq/3TOq/90zqv/T3lp/0txY/9ipoz/ND052Skk
        JhwoIiUfNkE84m29nv9Qe2r/T3lp/3TOq/90zqv/UHpp/zZRXP9CfpH/QXyQ/z97jv8/eo7/P3qO/z96
        jv8/eo7/P3qO/z96jv86Xmr/eXt7/+fn5/+Lior/NFJc/zdTXv9Qemn/dM6r/3TOq/9PeWn/UHtq/229
        nv82QTziKCIlHygiJR82QDzibLyd/096av9PeWn/dM6r/3TOq/9PeWf/QXuQ/1nU/P9XzPP/U8Hl/1XF
        6/9UweX/VcXr/1TB5f9Vxuv/VMLn/06vz/9GUlX/2dnY/4yKif9AfpP/Qn+U/095Z/90zqv/dM6r/095
        af9Pemr/bLyd/zZAPOIoIiUfKCIlHzZAPOJsvJ3/T3pq/095af90zqv/dM6r/095Z/9BfJH/V872/0N/
        kv8/UVf/O1dh/0BUWv87V2H/QFRa/ztYYf8/U1n/Pm59/0ROUv/Z2Nj/jIqJ/0B+k/9Cf5T/T3ln/3TO
        q/90zqv/T3lp/096av9svJ3/NkA84igiJR8oIiUfNkE84m29nv9Qe2r/T3lp/3TOq/90zqv/UHpp/zZS
        XP8/dYf/QUpN/6Cfnv9PTk7/oKCf/09OTv+goJ//T05O/6Cfn/8+QED/W1xc/+Dg4P+KiYn/NFJc/zdT
        Xv9Qemn/dM6r/3TOq/9PeWn/UHtq/229nv82QTziKCIlHykkJhw0PTnZY6aM/0txY/9PeWn/dM6r/3TO
        q/9Qe2r/KycnvyklJItERETxwMDA/1lZWf/AwMD/WVlZ/8DAwP9ZWVn/wMDA/1BQUP+7u7v/3t7e/2Nj
        Y/coJyadKycnvlB7av90zqv/dM6r/095af9LcWP/Y6aM/zQ9OdkpJCYcKykqBy4wL301PTrcMDMy8VB8
        a/90zqv/dM6r/097av8qJyh+HR0dF0ZGRuPAwMD/WVlZ/8DAwP9ZWVn/wMDA/1lZWf/AwMD/VlZW/7Ky
        sv99fX3/MzMzsiYmJg4qJyh+T3tq/3TOq/90zqv/UHxr/zAzMvE0PTncLi8vfSwqKgcqKCkAKykqCCgh
        JBUqJiiOT3tq/3TOq/90zqv/T3tq/yonKH4fHx8UQUFB26CgoP9QUFD/oKCg/1BQUP+goKD/UFBQ/6Gh
        of9BQUH4Ozs72C8vL5QpKSkkLCwsAConKH9Pe2r/dM6r/3TOq/9Pe2r/KiYojicgIxUrKSoIKicoAAAA
        AAAAAAAALS0tAConKIBQe2r/dc+s/3XPrP9Qe2r/KicofxwcHAIxMTF+Ozs71DIyMr47OzvRMjIyvjs7
        O9EyMjK+Ozs71DAwMIMiIiIbIiIiBiIiIgAtLS0AKicogFB7av91z6z/dc+s/1B7av8qJyh/LS0tAAAA
        AAAAAAAAAAAAAAAAAAAtLS0AKygpd0ltX/9rupz/a7qc/0ltX/8rKCl3LS0tACgoKAgjIyMXKSkpECMj
        IxYpKSkQIyMjFikpKRAjIyMXKSkpCCYmJgAAAAAAAAAAAC0tLQArKCl3SW1f/2u6nP9rupz/SW1f/yso
        KXctLS0AAAAAAAAAAAAAAAAAAAAAAC0tLQAsLCwyMTY0vzZAPOM2QDzjMTY0vywsLDItLS0AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALS0tACwsLDIxNjS/NkA84zZA
        POMxNjS/LCwsMi0tLQAAAAAAAAAAAAAAAAAAAAAALCwsAC0wLwEqJigSKCIlHCgiJRwpJScSLzIxAS0t
        LQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsLCwALTAvASom
        KBIoIiUcKCIlHCklJxIvMjEBLS0tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AP///AB///wAf//8AH///AB///wAf//8AP///AD//gQA4H4EAOB+BA
        DgfgQAYHgEACAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAACAeAABgfgQB4H4H/+B+B/
        /gf///////////////////////////////8=
</value>
  </data>
</root>